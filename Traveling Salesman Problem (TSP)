from itertools import permutations

def tsp_brute_force(graph, start):
    nodes = list(graph.keys())
    nodes.remove(start)
    min_path = None
    min_cost = float('inf')

    for perm in permutations(nodes):
        cost = 0
        current = start
        for nxt in perm:
            cost += graph[current][nxt]
            current = nxt
        cost += graph[current][start]  # return to start
        if cost < min_cost:
            min_cost = cost
            min_path = (start,) + perm + (start,)

    return min_path, min_cost

# Example complete graph with distances
graph = {
    'A': {'A':0, 'B':1, 'C':4, 'D':6},
    'B': {'A':1, 'B':0, 'C':2, 'D':5},
    'C': {'A':4, 'B':2, 'C':0, 'D':1},
    'D': {'A':6, 'B':5, 'C':1, 'D':0}
}

path, cost = tsp_brute_force(graph, 'A')
print("Path:", path)
print("Cost:", cost)
